import { PrismaClient } from '@prisma/client';
import { getCurrentUser } from '../../../lib/auth';
import { sendEmail } from '../../../lib/emailService';
import { generateQuoteEmailTemplate } from '../../../templates/email/quoteTemplate';

const prisma = new PrismaClient();

export default async function handler(req, res) {
  try {
    // 인증 사용자 확인 - getCurrentUser 사용
    let userId = null;
    
    try {
      const authUser = await getCurrentUser(req);
      if (authUser?.id) {
        userId = authUser.id;
      }
    } catch (authError) {
      console.log('인증 실패, shopidream 사용자로 fallback');
    }
    
    // 인증 실패 시 shopidream 사용자로 fallback
    if (!userId) {
      const user = await prisma.user.findUnique({
        where: { username: 'shopidream' }
      });
      
      if (!user) {
        return res.status(404).json({ error: 'shopidream 사용자를 찾을 수 없습니다' });
      }
      
      userId = user.id;
      console.log('shopidream 사용자로 처리:', userId);
    }

    if (req.method === 'GET') {
      const quotes = await prisma.quote.findMany({
        where: { userId },
        orderBy: { createdAt: 'desc' },
        include: {
          client: true
        }
      });
      
      return res.status(200).json(quotes);
    }

    if (req.method === 'POST') {
      const isAIQuote = req.body.type === 'ai_generated';
      
      if (isAIQuote) {
        return await handleAIQuote(req, res, userId);
      } else {
        return await handleManualQuote(req, res, userId);
      }
    }

    return res.status(405).json({ error: '허용되지 않는 메소드입니다' });
  } catch (error) {
    console.error('Quotes API 오류:', error);
    return res.status(500).json({ 
      error: '서버 오류가 발생했습니다',
      details: error.message 
    });
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * AI 견적 처리 - clientId 없이 생성
 */
async function handleAIQuote(req, res, userId) {
  const { title, type, amount, status, items, metadata } = req.body;
  
  if (!title || !type || !items || !metadata) {
    return res.status(400).json({ 
      error: 'AI 견적 필수 데이터가 누락되었습니다 (title, type, items, metadata 필요)' 
    });
  }

  try {
    console.log('AI 견적 생성 시작:', { title, type, amount, userId });

    // AI 견적은 clientId 없이 생성
    const quote = await prisma.quote.create({
      data: {
        userId,
        // clientId는 null로 설정 (AI 견적은 특정 고객과 연결되지 않음)
        title: title,
        type: type,
        items: typeof items === 'string' ? items : JSON.stringify(items),
        amount: amount || 0,
        status: status || 'draft',
        metadata: typeof metadata === 'string' ? metadata : JSON.stringify(metadata),
        createdAt: new Date(),
        updatedAt: new Date()
      }
    });

    console.log('AI 견적 생성 완료:', quote.id);
    return res.status(201).json(quote);
    
  } catch (error) {
    console.error('AI 견적 생성 오류:', error);
    return res.status(500).json({ 
      error: 'AI 견적 생성 중 오류가 발생했습니다',
      details: error.message 
    });
  }
}

/**
 * 수동 견적 처리 - clientId 필수
 */
async function handleManualQuote(req, res, userId) {
  const { clientInfo, items, pricing } = req.body;
  
  if (!clientInfo || !items || items.length === 0) {
    return res.status(400).json({ error: '필수 데이터가 누락되었습니다' });
  }

  try {
    // 클라이언트 찾기 또는 생성
    let client = await prisma.client.findFirst({
      where: { 
        userId: userId,
        email: clientInfo.email 
      }
    });

    if (!client) {
      client = await prisma.client.create({
        data: {
          userId: userId,
          email: clientInfo.email,
          name: clientInfo.name,
          company: clientInfo.company || null,
          phone: clientInfo.phone || null
        }
      });
    }

    const quote = await prisma.quote.create({
      data: {
        userId: userId,
        clientId: client.id, // 일반 견적은 clientId 필수
        title: `견적서 - ${clientInfo.name}`,
        type: 'manual',
        items: JSON.stringify(items),
        amount: pricing?.total || 0,
        notes: clientInfo.message || null,
        status: 'pending'
      },
      include: {
        client: true
      }
    });

    // 견적서 이메일 자동 발송 (생략 가능)
    try {
      const userData = { 
        id: userId, 
        name: 'ShopIDream', 
        email: 'cs@shopidream.com' 
      };
      
      const firstItem = items[0];
      const serviceInfo = {
        title: firstItem.serviceName,
        duration: firstItem.service?.duration || '협의'
      };
      
      const quoteWithService = {
        ...quote,
        service: serviceInfo
      };
      
      const emailTemplate = generateQuoteEmailTemplate(quoteWithService, userData);
      
      await sendEmail({
        to: client.email,
        subject: emailTemplate.subject,
        html: emailTemplate.html,
        text: emailTemplate.text
      });

      await prisma.quote.update({
        where: { id: quote.id },
        data: { status: 'sent' }
      });

    } catch (emailError) {
      console.error('견적서 이메일 발송 실패:', emailError);
    }
    
    return res.status(201).json(quote);
    
  } catch (error) {
    console.error('수동 견적 생성 오류:', error);
    return res.status(500).json({ 
      error: '견적 생성 중 오류가 발생했습니다',
      details: error.message 
    });
  }
}