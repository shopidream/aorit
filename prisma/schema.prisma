// schema.prisma - 다국어 계약서 시스템 확장 (MediumText 적용)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ============ NextAuth + 핵심 사용자 모델 ============
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?   // nullable (소셜 로그인용)
  name          String?
  role          String    @default("freelancer")
  
  // NextAuth 필수 필드들
  emailVerified DateTime?
  image         String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // 기존 관계들
  profile       Profile?
  services      Service[]
  serviceCategories ServiceCategory[] 
  clients       Client[]
  quotes        Quote[]
  contracts     Contract[]
  reviews       Review[]   @relation("UserReviews")
  portfolio     Portfolio[]
  publicPage    PublicPage?
  uploadedContracts SourceContract[] @relation("UploadedBy")
  reviewedTemplates ContractTemplate[] @relation("ReviewedBy")
  contractTemplates ContractTemplate[]
  sharedServices    SharedService[]
  
  // NextAuth 관계
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============ 기존 모델들 ============

// 프로필 & 소개
model Profile {
  id          Int     @id @default(autoincrement())
  userId      String  @unique
  
  // 담당자 정보
  contactName  String?
  contactPhone String?
  contactEmail String?
  
  // 회사 정보
  companyName    String?
  ceoName        String?
  businessNumber String?
  companyPhone   String?
  companyEmail   String?
  companyAddress String?
  businessType   String?
  businessItem   String?
  companyFax     String?
  
  // 서명 정보 추가
  signatureImage String?
  stampImage     String?
  
  // 기존 필드
  bio         String?  @db.Text
  website     String?
  youtube     String?
  snsLinks    String?  @db.Text
  phone       String?
  address     String?  @db.Text
  profileCard String?  @db.Text
  
  // 계좌 정보 추가
  bankName      String?
  accountNumber String?
  accountHolder String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 카테고리 관리
model ServiceCategory {
  id            String   @id
  userId        String
  name          String
  type          String
  order         Int      @default(0)
  contractTitle String?
  addonOnlyTitle String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  services Service[]
  
  @@unique([userId, id])
}

// 서비스 관리
model Service {
  id              Int      @id @default(autoincrement())
  userId          String
  categoryId      String
  title           String
  description     String   @db.Text
  price           Float?
  planLevel       String?
  duration        String?
  images          String?  @db.Text
  features        String?  @db.Text
  tags           String?   @db.Text
  deliverables    String?  @db.Text
  packages        String?  @db.Text
  order          Int      @default(0)
  isPlan      Boolean @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category ServiceCategory @relation(fields: [userId, categoryId], references: [userId, id], onDelete: Cascade)
  quotes   Quote[]
  
  // 공유 관련 추가
  sharedIn SharedService[] @relation("SharedServices")
}

// 고객 관리
model Client {
  id        Int      @id @default(autoincrement())
  userId    String
  email     String
  name      String
  phone     String?
  company   String?
  position  String?
  serviceCategory String?
  serviceDescription String? @db.Text
  websiteUrl String?
  memo      String?  @db.Text
  businessNumber String?
  companyAddress String? @db.Text
  companyPhone   String?
  
  // Soft Delete 필드 추가
  deleted   Boolean  @default(false)
  deletedAt DateTime?
  
  createdAt DateTime @default(now())
  
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotes    Quote[]
  contracts Contract[]
  
  @@unique([userId, email])
}

// 견적 관리
model Quote {
  id          Int      @id @default(autoincrement())
  userId      String?
  clientId    Int?
  serviceId   Int?
  
  // 기본 정보
  title       String?
  status      String   @default("draft")
  amount      Float?
  items       String?  @db.Text
  validUntil  DateTime?
  notes       String?  @db.Text
  
  // AI 견적 지원 필드
  type        String   @default("manual")
  metadata    String?  @db.Text
  
  // 타임스탬프
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  client      Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service     Service? @relation(fields: [serviceId], references: [id])
  contracts   Contract[]

  @@map("quotes")
}

// 계약 관리
model Contract {
  id        Int      @id @default(autoincrement())
  userId    String
  clientId  Int
  quoteId   Int?
  templateId Int?
  
  title     String?
  type      String   @default("manual")
  status    String   @default("pending")
  amount    Float?
  content   String?  @db.MediumText
  metadata  String?  @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  client     Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  quote      Quote?              @relation(fields: [quoteId], references: [id])
  template   ContractTemplate?   @relation(fields: [templateId], references: [id])
  clauses    Clause[]
  signatures Signature[]
  progress   ContractProgress[]
  reviews    Review[]
  signTokens SignToken[]
  checklists ContractChecklist[]
}

// SignToken 모델
model SignToken {
  id         Int      @id @default(autoincrement())
  contractId Int
  token      String   @unique
  signerType String
  email      String
  otp        String?
  otpExpiry  DateTime?
  isUsed     Boolean  @default(false)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

// 계약 조항
model Clause {
  id         Int     @id @default(autoincrement())
  contractId Int
  title      String?
  type       String
  content    String  @db.MediumText
  essential  Boolean @default(false)
  order      Int     @default(0)
  
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

// 전자서명
model Signature {
  id            Int      @id @default(autoincrement())
  contractId    Int
  signerType    String
  signerName    String
  signerEmail   String
  signatureData String?  @db.MediumText
  signatureType String?
  signedAt      DateTime @default(now())
  
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

// 계약 진행상황
model ContractProgress {
  id         Int     @id @default(autoincrement())
  contractId Int
  task       String
  completed  Boolean @default(false)
  order      Int     @default(0)
  
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

// 계약 체크리스트
model ContractChecklist {
  id         Int      @id @default(autoincrement())
  contractId Int
  title      String
  description String?  @db.Text
  category   String
  order      Int      @default(0)
  completed  Boolean  @default(false)
  completedAt DateTime?
  requiresSignature Boolean @default(false)
  signature  String?  @db.MediumText
  signedAt   DateTime?
  createdAt  DateTime @default(now())
  
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

// 리뷰 & 평점
model Review {
  id         Int      @id @default(autoincrement())
  userId     String
  contractId Int
  rating     Int
  comment    String?  @db.Text
  createdAt  DateTime @default(now())
  
  user     User     @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

// 포트폴리오
model Portfolio {
  id          Int      @id @default(autoincrement())
  userId      String
  title       String
  description String?  @db.Text
  link        String?
  imageUrl    String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 공개 페이지
model PublicPage {
  id       Int     @id @default(autoincrement())
  userId   String  @unique
  slug     String  @unique
  theme    String  @default("default")
  isActive Boolean @default(true)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ============ 다국어 템플릿 시스템 ============

// 원본 계약서 저장소 (다국어 확장)
model SourceContract {
  id            Int      @id @default(autoincrement())
  filename      String   @unique
  title         String?
  fullText      String   @db.MediumText
  metadata      String?  @db.Text
  clauseCount   Int      @default(0)
  uploadedBy    String
  status        String   @default("uploaded")
  processedAt   DateTime?
  analysisResult String? @db.MediumText
  
  // 🌍 다국어 필드 추가
  countryCode   String   @default("kr")
  language      String   @default("ko")
  
  createdAt     DateTime @default(now())
  
  uploader User @relation("UploadedBy", fields: [uploadedBy], references: [id])
  candidates ClauseCandidate[]
  
  @@index([countryCode, language])
  @@index([status, countryCode])
}

// 조항 후보 (다국어 확장)
model ClauseCandidate {
  id               Int      @id @default(autoincrement())
  title            String
  content          String   @db.MediumText
  contractCategory String
  clauseCategory   String?
  sourceContract   String
  sourceId         Int?
  confidence       Float    @default(0.5)
  tags             String?  @db.Text
  variables        String?  @db.MediumText
  similarity       Float?
  needsReview      Boolean  @default(true)
  reviewedAt       DateTime?
  status           String   @default("pending")
  
  // 🌍 다국어 필드 추가
  countryCode      String   @default("kr")
  language         String   @default("ko")
  
  createdAt        DateTime @default(now())
  
  source SourceContract? @relation(fields: [sourceId], references: [id], onDelete: SetNull)
  
  @@index([countryCode, language])
  @@index([status, countryCode])
  @@index([clauseCategory, countryCode])
}

// 계약서 템플릿 (다국어 확장)
model ContractTemplate {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?  @db.Text
  content      String   @db.MediumText
  category     String
  variables    String?  @db.MediumText
  clauses      String?  @db.MediumText
  status       String   @default("active")
  userId       String
  
  // 기존 필드들
  type         String?
  tags         String?  @db.Text
  industry     String?
  complexity   String?
  confidence   Float    @default(1.0)
  usageCount   Int      @default(0)
  popularity   Float    @default(0.0)
  lastUsed     DateTime?
  reviewedBy   String?
  isActive     Boolean  @default(true)
  
  // 🌍 다국어 필드 추가
  countryCode  String   @default("kr")
  language     String   @default("ko")
  legalSystem  String   @default("civil_law")
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id])
  reviewer     User?    @relation("ReviewedBy", fields: [reviewedBy], references: [id])
  contracts    Contract[]
  
  @@index([category, status])
  @@index([industry, complexity])
  @@index([popularity])
  @@index([countryCode, language])
  @@index([legalSystem, countryCode])
}

// 템플릿 매칭 로그 (다국어 확장)
model TemplateMatchLog {
  id            Int      @id @default(autoincrement())
  quoteId       Int?
  contractId    Int?
  industry      String?
  serviceType   String?
  amount        Float?
  complexity    String?
  matchedTemplates String? @db.MediumText
  selectedTemplate Int?
  satisfaction  Int?
  
  // 🌍 다국어 필드 추가
  countryCode   String   @default("kr")
  language      String   @default("ko")
  
  createdAt     DateTime @default(now())
  
  @@index([countryCode, language])
}

// ============ 다국어 카테고리 시스템 ============

// 조항 카테고리 (다국어 확장)
model ClauseCategory {
  id          Int      @id @default(autoincrement())
  name        String
  level       Int      @default(1)
  parentId    Int?
  description String?  @db.Text
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  usageCount  Int      @default(0)
  
  // 🌍 다국어 필드 추가
  countryCode String   @default("kr")
  language    String   @default("ko")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 자기 참조 관계
  parent   ClauseCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children ClauseCategory[] @relation("CategoryHierarchy")
  
  @@index([level, isActive])
  @@index([parentId])
  @@index([countryCode, language])
  @@unique([name, countryCode, language])
}

// 제안된 카테고리 (다국어 확장)
model ProposedCategory {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?  @db.Text
  suggestedBy    String   @default("gpt")
  sourceTemplate String?
  parentId       Int?
  confidence     Float    @default(0.7)
  status         String   @default("pending")
  adminNotes     String?  @db.Text
  
  // 🌍 다국어 필드 추가
  countryCode    String   @default("kr")
  language       String   @default("ko")
  
  createdAt      DateTime @default(now())
  reviewedAt     DateTime?
  
  @@index([status])
  @@index([suggestedBy])
  @@index([countryCode, language])
}

// ============ 🌍 다국어 시스템 신규 테이블 ============

// 국가별 법적 프로파일
model CountryLegalProfile {
  id                    Int      @id @default(autoincrement())
  countryCode           String   @unique
  countryName           String
  language              String
  legalSystem           String
  
  // 분쟁 해결 선호도
  preferredDispute      String   @default("court")
  arbitrationPreference Boolean  @default(false)
  
  // 표준 조항 설정
  governingLawRequired     Boolean @default(true)
  confidentialityRequired  Boolean @default(true)
  terminationNoticeRequired Boolean @default(true)
  dataProtectionRequired   Boolean @default(false)
  
  // AI 모델 설정
  mlModelPath           String?
  promptTemplate        String?  @db.MediumText
  riskWeights           String?  @db.MediumText // JSON
  
  // 메타데이터
  isActive              Boolean  @default(true)
  templateCount         Int      @default(0)
  lastTrainingDate      DateTime?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // 관계
  standardClauses       StandardClause[]
  legalTerms           LegalTermDictionary[]
  
  @@index([countryCode])
  @@index([language])
  @@index([legalSystem])
}

// 국가별 표준 조항 라이브러리
model StandardClause {
  id                Int      @id @default(autoincrement())
  countryCode       String
  clauseType        String
  title             String
  content           String   @db.MediumText
  
  // 메타데이터
  riskLevel         Int      @default(1)
  isRequired        Boolean  @default(false)
  industrySpecific  String?
  
  // 사용 통계
  usageCount        Int      @default(0)
  successRate       Float    @default(0.0)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  country           CountryLegalProfile @relation(fields: [countryCode], references: [countryCode])
  
  @@index([countryCode, clauseType])
  @@index([riskLevel])
  @@index([isRequired])
}

// 국가별 법적 용어 사전
model LegalTermDictionary {
  id          Int      @id @default(autoincrement())
  countryCode String
  term        String
  definition  String?  @db.Text
  riskLevel   Int      @default(1)
  alternatives String? @db.MediumText // JSON array
  
  createdAt   DateTime @default(now())
  
  country     CountryLegalProfile @relation(fields: [countryCode], references: [countryCode])
  
  @@unique([countryCode, term])
  @@index([countryCode])
  @@index([riskLevel])
}

// ============ 서비스 공유 시스템 ============

// 공유된 서비스 링크
model SharedService {
  id            Int      @id @default(autoincrement())
  userId        String
  token         String   @unique
  title         String
  description   String?  @db.Text
  thumbnailImage String?
  
  // OG 태그 설정
  ogTitle       String?
  ogDescription String?  @db.Text
  ogImage       String?
  
  // 접근 제어
  password      String?
  expiryDate    DateTime?
  isActive      Boolean  @default(true)
  
  // 통계
  viewCount     Int      @default(0)
  lastViewedAt  DateTime?
  
  // 타임스탬프
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // 관계
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  services      Service[] @relation("SharedServices")
  views         SharedServiceView[]
  
  @@index([token])
  @@index([userId])
  @@index([isActive])
  @@index([expiryDate])
}

// 공유 서비스 조회 기록
model SharedServiceView {
  id             Int      @id @default(autoincrement())
  sharedServiceId Int
  ipAddress      String
  userAgent      String?  @db.Text
  referer        String?
  viewedAt       DateTime @default(now())
  
  sharedService  SharedService @relation(fields: [sharedServiceId], references: [id], onDelete: Cascade)
  
  @@index([sharedServiceId])
  @@index([viewedAt])
}

// 국가별 조항 카테고리 매핑 테이블
model CountryClauseCategory {
  id           Int      @id @default(autoincrement())
  countryCode  String   // kr, us, de, fr 등
  categoryKey  String   // basic, payment, service, delivery 등 (시스템 내부용)
  categoryName String   // "기본 정보", "Payment Terms" 등 (표시용)
  description  String?  @db.Text
  isActive     Boolean  @default(true)
  sortOrder    Int      @default(0)
  
  // 사용 통계
  usageCount   Int      @default(0)
  
  // 메타데이터
  riskWeight   Float    @default(1.0)  // 해당 조항의 위험도 가중치
  isRequired   Boolean  @default(false) // 필수 조항 여부
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([countryCode, categoryKey])
  @@index([countryCode])
  @@index([categoryKey])
  @@index([isActive])
}