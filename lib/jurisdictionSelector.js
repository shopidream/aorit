import { JURISDICTION_MAPPING } from '../data/industries/index.js';

export class JurisdictionSelector {
  
  static selectJurisdiction(clientInfo) {
    const address = clientInfo.businessAddress || clientInfo.address || '';
    const jurisdiction = this.findJurisdictionFromAddress(address);
    
    return {
      court: jurisdiction.court,
      fullName: jurisdiction.fullName,
      address: jurisdiction.address,
      phone: jurisdiction.phone,
      confidence: jurisdiction.confidence
    };
  }

  static findJurisdictionFromAddress(address) {
    if (!address) {
      return this.getDefaultJurisdiction();
    }

    const normalizedAddress = address.replace(/[\s\-\.]/g, '');
    
    const districtMappings = {
      '강남구': { court: '서울중앙지방법원', confidence: 0.9 },
      '서초구': { court: '서울중앙지방법원', confidence: 0.9 },
      '송파구': { court: '서울중앙지방법원', confidence: 0.9 },
      '마포구': { court: '서울서부지방법원', confidence: 0.9 },
      '은평구': { court: '서울서부지방법원', confidence: 0.9 },
      '노원구': { court: '서울북부지방법원', confidence: 0.9 },
      '강북구': { court: '서울북부지방법원', confidence: 0.9 },
      '성남시': { court: '수원지방법원 성남지원', confidence: 0.9 },
      '용인시': { court: '수원지방법원', confidence: 0.9 },
      '수원시': { court: '수원지방법원', confidence: 0.9 },
      '부천시': { court: '인천지방법원 부천지원', confidence: 0.9 },
      '고양시': { court: '고양지원', confidence: 0.9 }
    };

    for (const [district, info] of Object.entries(districtMappings)) {
      if (normalizedAddress.includes(district)) {
        return this.getJurisdictionDetails(info.court, info.confidence);
      }
    }

    const cityMappings = {
      '서울': { court: '서울중앙지방법원', confidence: 0.7 },
      '부산': { court: '부산지방법원', confidence: 0.8 },
      '대구': { court: '대구지방법원', confidence: 0.8 },
      '인천': { court: '인천지방법원', confidence: 0.8 },
      '광주': { court: '광주지방법원', confidence: 0.8 },
      '대전': { court: '대전지방법원', confidence: 0.8 },
      '울산': { court: '울산지방법원', confidence: 0.8 }
    };

    for (const [city, info] of Object.entries(cityMappings)) {
      if (normalizedAddress.includes(city)) {
        return this.getJurisdictionDetails(info.court, info.confidence);
      }
    }

    return this.getDefaultJurisdiction();
  }

  static getJurisdictionDetails(courtName, confidence = 0.8) {
    const courtDetails = {
      '서울중앙지방법원': {
        fullName: '서울중앙지방법원',
        address: '서울특별시 서초구 서초대로 219',
        phone: '02-530-1114',
        code: 'SCDC'
      },
      '서울서부지방법원': {
        fullName: '서울서부지방법원',
        address: '서울특별시 양천구 남부순환로 64길 26',
        phone: '02-2670-1114',
        code: 'SWDC'
      },
      '서울북부지방법원': {
        fullName: '서울북부지방법원',
        address: '서울특별시 도봉구 마들로 656',
        phone: '02-900-1114',
        code: 'SNDC'
      },
      '수원지방법원': {
        fullName: '수원지방법원',
        address: '경기도 수원시 영통구 법조로 45',
        phone: '031-273-1114',
        code: 'SUWON'
      },
      '수원지방법원 성남지원': {
        fullName: '수원지방법원 성남지원',
        address: '경기도 성남시 분당구 돌마로 27',
        phone: '031-729-1114',
        code: 'SUWON_SEONGNAM'
      },
      '인천지방법원': {
        fullName: '인천지방법원',
        address: '인천광역시 미추홀구 이중동로 123',
        phone: '032-850-1114',
        code: 'INCHEON'
      },
      '인천지방법원 부천지원': {
        fullName: '인천지방법원 부천지원',
        address: '경기도 부천시 원미구 부천로 264번길 51',
        phone: '032-679-1114',
        code: 'INCHEON_BUCHEON'
      },
      '부산지방법원': {
        fullName: '부산지방법원',
        address: '부산광역시 연제구 월드컵대로 98',
        phone: '051-850-1114',
        code: 'BUSAN'
      }
    };

    const details = courtDetails[courtName] || courtDetails['서울중앙지방법원'];
    
    return {
      court: courtName,
      confidence,
      ...details
    };
  }

  static getDefaultJurisdiction() {
    return this.getJurisdictionDetails('서울중앙지방법원', 0.3);
  }

  static formatForContract(jurisdictionInfo) {
    const confidence = jurisdictionInfo.confidence;
    
    if (confidence >= 0.8) {
      return `${jurisdictionInfo.fullName}을 관할 법원으로 합니다.`;
    } else if (confidence >= 0.5) {
      return `${jurisdictionInfo.fullName} 또는 당사자 중 한쪽의 주소지 관할 법원에서 해결합니다.`;
    } else {
      return `당사자 중 한쪽의 주소지 관할 법원에서 해결하며, 합의가 되지 않을 경우 ${jurisdictionInfo.fullName}을 관할 법원으로 합니다.`;
    }
  }

  static generateJurisdictionClause(clientInfo, providerInfo) {
    const jurisdiction = this.selectJurisdiction(clientInfo);
    
    return {
      title: '관할 법원',
      content: `본 계약과 관련하여 발생하는 모든 분쟁은 다음 절차에 따라 해결한다.\n` +
               `① 분쟁 발생 시 당사자 간 성실한 협의를 통해 해결하도록 노력한다.\n` +
               `② 협의로 해결되지 않을 경우 ${this.formatForContract(jurisdiction)}\n` +
               `③ 소송 제기 전 조정 또는 중재를 통한 해결을 우선 시도할 수 있다.`,
      
      metadata: {
        selectedCourt: jurisdiction.fullName,
        confidence: jurisdiction.confidence,
        autoGenerated: true,
        generatedAt: new Date().toISOString()
      }
    };
  }

  static generateJurisdictionSummary(clientInfo) {
    const jurisdiction = this.selectJurisdiction(clientInfo);

    return {
      selectedCourt: jurisdiction.fullName,
      confidence: jurisdiction.confidence,
      explanation: this.getConfidenceExplanation(jurisdiction.confidence),
      courtInfo: {
        address: jurisdiction.address,
        phone: jurisdiction.phone
      },
      canChange: true
    };
  }

  static getConfidenceExplanation(confidence) {
    if (confidence >= 0.9) {
      return '주소 정보를 바탕으로 정확한 관할법원을 선택했습니다.';
    } else if (confidence >= 0.7) {
      return '주소 정보를 바탕으로 적절한 관할법원을 선택했습니다.';
    } else if (confidence >= 0.5) {
      return '주소 정보가 불완전하여 일반적인 관할법원을 선택했습니다.';
    } else {
      return '주소 정보가 없어 기본 관할법원(서울중앙지방법원)을 선택했습니다.';
    }
  }
}

export const getJurisdictionForContract = (clientAddress) => {
  return JurisdictionSelector.selectJurisdiction({ address: clientAddress });
};

export const generateJurisdictionClause = (clientInfo, providerInfo) => {
  return JurisdictionSelector.generateJurisdictionClause(clientInfo, providerInfo);
};