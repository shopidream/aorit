// scripts/CleanClauses.js - Íµ≠Í∞ÄÎ≥Ñ Í≥ÑÏïΩÏÑú Ï°∞Ìï≠ Îç∞Ïù¥ÌÑ∞ ÏÑ†ÌÉù ÏÇ≠Ï†ú
require('dotenv').config();

// Prisma ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî
let prisma;
try {
  const { PrismaClient } = require('@prisma/client');
  prisma = new PrismaClient({
    log: ['error', 'warn']
  });
} catch (error) {
  console.error('‚ùå Prisma ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
  console.log('üí° PrismaÍ∞Ä ÏÑ§ÏπòÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî: npm install @prisma/client');
  console.log('üí° Prisma ÏÉùÏÑ±: npx prisma generate');
  process.exit(1);
}

// 30Í∞úÍµ≠ ÏßÄÏõê
const COUNTRIES = {
  // ÏïÑÏãúÏïÑ-ÌÉúÌèâÏñë
  kr: { name: 'ÌïúÍµ≠', flag: 'üá∞üá∑', legalSystem: 'civil_law', language: 'ko' },
  jp: { name: 'ÏùºÎ≥∏', flag: 'üáØüáµ', legalSystem: 'civil_law', language: 'ja' },
  tw: { name: 'ÎåÄÎßå', flag: 'üáπüáº', legalSystem: 'civil_law', language: 'zh-TW' },
  sg: { name: 'Ïã±Í∞ÄÌè¨Î•¥', flag: 'üá∏üá¨', legalSystem: 'common_law', language: 'en' },
  hk: { name: 'ÌôçÏΩ©', flag: 'üá≠üá∞', legalSystem: 'common_law', language: 'en' },
  my: { name: 'ÎßêÎ†àÏù¥ÏãúÏïÑ', flag: 'üá≤üáæ', legalSystem: 'mixed_law', language: 'en' },
  th: { name: 'ÌÉúÍµ≠', flag: 'üáπüá≠', legalSystem: 'civil_law', language: 'th' },
  ph: { name: 'ÌïÑÎ¶¨ÌïÄ', flag: 'üáµüá≠', legalSystem: 'common_law', language: 'en' },
  in: { name: 'Ïù∏ÎèÑ', flag: 'üáÆüá≥', legalSystem: 'common_law', language: 'en' },
  au: { name: 'Ìò∏Ï£º', flag: 'üá¶üá∫', legalSystem: 'common_law', language: 'en' },
  nz: { name: 'Îâ¥ÏßàÎûúÎìú', flag: 'üá≥üáø', legalSystem: 'common_law', language: 'en' },

  // Î∂ÅÎØ∏
  us: { name: 'ÎØ∏Íµ≠', flag: 'üá∫üá∏', legalSystem: 'common_law', language: 'en' },
  ca: { name: 'Ï∫êÎÇòÎã§', flag: 'üá®üá¶', legalSystem: 'common_law', language: 'en' },
  mx: { name: 'Î©ïÏãúÏΩî', flag: 'üá≤üáΩ', legalSystem: 'civil_law', language: 'es' },

  // Ïú†ÎüΩ
  uk: { name: 'ÏòÅÍµ≠', flag: 'üá¨üáß', legalSystem: 'common_law', language: 'en' },
  ie: { name: 'ÏïÑÏùºÎûúÎìú', flag: 'üáÆüá™', legalSystem: 'common_law', language: 'en' },
  de: { name: 'ÎèÖÏùº', flag: 'üá©üá™', legalSystem: 'civil_law', language: 'de' },
  fr: { name: 'ÌîÑÎûëÏä§', flag: 'üá´üá∑', legalSystem: 'civil_law', language: 'fr' },
  es: { name: 'Ïä§ÌéòÏù∏', flag: 'üá™üá∏', legalSystem: 'civil_law', language: 'es' },
  it: { name: 'Ïù¥ÌÉàÎ¶¨ÏïÑ', flag: 'üáÆüáπ', legalSystem: 'civil_law', language: 'it' },
  nl: { name: 'ÎÑ§ÎçúÎûÄÎìú', flag: 'üá≥üá±', legalSystem: 'civil_law', language: 'nl' },
  be: { name: 'Î≤®Í∏∞Ïóê', flag: 'üáßüá™', legalSystem: 'civil_law', language: 'nl' },
  ch: { name: 'Ïä§ÏúÑÏä§', flag: 'üá®üá≠', legalSystem: 'civil_law', language: 'de' },
  se: { name: 'Ïä§Ïõ®Îç¥', flag: 'üá∏üá™', legalSystem: 'civil_law', language: 'sv' },
  no: { name: 'ÎÖ∏Î•¥Ïõ®Ïù¥', flag: 'üá≥üá¥', legalSystem: 'civil_law', language: 'no' },
  dk: { name: 'Îç¥ÎßàÌÅ¨', flag: 'üá©üá∞', legalSystem: 'civil_law', language: 'da' },
  fi: { name: 'ÌïÄÎûÄÎìú', flag: 'üá´üáÆ', legalSystem: 'civil_law', language: 'fi' },
  pl: { name: 'Ìè¥ÎûÄÎìú', flag: 'üáµüá±', legalSystem: 'civil_law', language: 'pl' },
  ru: { name: 'Îü¨ÏãúÏïÑ', flag: 'üá∑üá∫', legalSystem: 'civil_law', language: 'ru' },

  // Ï§ëÎèô
  ae: { name: 'UAE', flag: 'üá¶üá™', legalSystem: 'mixed_law', language: 'en' },

  // ÎÇ®ÎØ∏
  br: { name: 'Î∏åÎùºÏßà', flag: 'üáßüá∑', legalSystem: 'civil_law', language: 'pt' },

  // ÏïÑÌîÑÎ¶¨Ïπ¥
  za: { name: 'ÎÇ®ÏïÑÍ≥µ', flag: 'üáøüá¶', legalSystem: 'mixed_law', language: 'en' }
};

/**
 * Î©îÏù∏ Ìï®Ïàò - Íµ≠Í∞ÄÎ≥Ñ Í≥ÑÏïΩÏÑú Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
 */
async function main() {
  console.log('üßπ Íµ≠Í∞ÄÎ≥Ñ Í≥ÑÏïΩÏÑú Ï°∞Ìï≠ Îç∞Ïù¥ÌÑ∞ ÏÑ†ÌÉù ÏÇ≠Ï†ú ÏãúÏä§ÌÖú');
  console.log('===============================================');
  
  // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
  try {
    await prisma.$connect();
    console.log('‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏÑ±Í≥µ\n');
  } catch (connectError) {
    console.error('‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ïã§Ìå®:', connectError);
    console.log('üí° DATABASE_URL ÌôïÏù∏:', process.env.DATABASE_URL ? 'ÏÑ§Ï†ïÎê®' : 'ÏÑ§Ï†ï ÏïàÎê®');
    throw connectError;
  }
  
  try {
    const args = parseArguments();
    
    if (args.help) {
      showUsage();
      return;
    }
    
    // 1. Í∏∞Ï°¥ ÌÖúÌîåÎ¶ø ÌòÑÌô© Ï°∞Ìöå
    const countryStats = await getCountryTemplateStats();
    
    if (Object.keys(countryStats).length === 0) {
      console.log('üìã ÏÇ≠Ï†úÌï† ÌÖúÌîåÎ¶øÏù¥ ÏóÜÏäµÎãàÎã§.');
      return;
    }
    
    // 2. Íµ≠Í∞ÄÎ≥Ñ ÌòÑÌô© Ï∂úÎ†•
    displayCountryStats(countryStats);
    
    // 3. ÏÇ≠Ï†úÌï† Íµ≠Í∞Ä ÏÑ†ÌÉù
    let selectedCountries;
    if (args.countries && args.countries.length > 0) {
      // Î™ÖÎ†πÌñâ Ïù∏ÏàòÎ°ú Íµ≠Í∞Ä ÏßÄÏ†ï
      selectedCountries = args.countries;
      console.log(`\nüéØ ÏßÄÏ†ïÎêú Íµ≠Í∞Ä: ${selectedCountries.map(c => `${COUNTRIES[c]?.flag} ${c}`).join(', ')}`);
    } else if (args.batch) {
      console.log('‚ùå Î∞∞Ïπò Î™®ÎìúÏóêÏÑúÎäî --countries ÏòµÏÖòÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      showUsage();
      return;
    } else {
      // ÎåÄÌôîÌòï ÏÑ†ÌÉù
      selectedCountries = await selectCountriesInteractive(countryStats);
    }
    
    if (!selectedCountries || selectedCountries.length === 0) {
      console.log('‚ùå ÏÑ†ÌÉùÎêú Íµ≠Í∞ÄÍ∞Ä ÏóÜÏäµÎãàÎã§.');
      return;
    }
    
    // 4. ÏÑ†ÌÉùÎêú Íµ≠Í∞Ä Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    const validCountries = selectedCountries.filter(country => {
      if (!COUNTRIES[country]) {
        console.warn(`‚ö†Ô∏è Ïïå Ïàò ÏóÜÎäî Íµ≠Í∞Ä ÏΩîÎìú: ${country}`);
        return false;
      }
      if (!countryStats[country]) {
        console.warn(`‚ö†Ô∏è ÌÖúÌîåÎ¶øÏù¥ ÏóÜÎäî Íµ≠Í∞Ä: ${country}`);
        return false;
      }
      return true;
    });
    
    if (validCountries.length === 0) {
      console.log('‚ùå Ïú†Ìö®Ìïú Íµ≠Í∞ÄÍ∞Ä ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
      return;
    }
    
    // 5. ÏÇ≠Ï†ú ÌôïÏù∏ Î∞è Ïã§Ìñâ
    await cleanSelectedCountries(validCountries, countryStats, args.batch);
    
  } catch (error) {
    console.error('‚ùå Ïã§Ìñâ Ïò§Î•ò:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Íµ≠Í∞ÄÎ≥Ñ ÌÖúÌîåÎ¶ø ÌÜµÍ≥Ñ Ï°∞Ìöå
 */
async function getCountryTemplateStats() {
  console.log('üìä Íµ≠Í∞ÄÎ≥Ñ ÌÖúÌîåÎ¶ø ÌòÑÌô© Ï°∞Ìöå Ï§ë...');
  
  try {
    // Í∞Å Î™®Îç∏ÏóêÏÑú Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÌõÑ ÌïÑÌÑ∞ÎßÅ
    const [templates, candidates, sources] = await Promise.all([
      prisma.contractTemplate.findMany({
        select: {
          countryCode: true
        }
      }),
      prisma.clauseCandidate.findMany({
        select: {
          countryCode: true
        }
      }),
      prisma.sourceContract.findMany({
        select: {
          countryCode: true
        }
      })
    ]);
    
    // ÏàòÎèôÏúºÎ°ú Í∑∏Î£πÌôî (null Í∞í Ï†úÏô∏)
    const stats = {};
    
    // ÌÖúÌîåÎ¶ø Ïπ¥Ïö¥Ìä∏
    templates.forEach(template => {
      const code = template.countryCode;
      if (code && code.trim() !== '') { // nullÍ≥º Îπà Î¨∏ÏûêÏó¥ Ï≤¥ÌÅ¨
        if (!stats[code]) stats[code] = {};
        stats[code].templates = (stats[code].templates || 0) + 1;
      }
    });
    
    // Ï°∞Ìï≠ ÌõÑÎ≥¥ Ïπ¥Ïö¥Ìä∏
    candidates.forEach(candidate => {
      const code = candidate.countryCode;
      if (code && code.trim() !== '') { // nullÍ≥º Îπà Î¨∏ÏûêÏó¥ Ï≤¥ÌÅ¨
        if (!stats[code]) stats[code] = {};
        stats[code].candidates = (stats[code].candidates || 0) + 1;
      }
    });
    
    // ÏõêÎ≥∏ Í≥ÑÏïΩÏÑú Ïπ¥Ïö¥Ìä∏
    sources.forEach(source => {
      const code = source.countryCode;
      if (code && code.trim() !== '') { // nullÍ≥º Îπà Î¨∏ÏûêÏó¥ Ï≤¥ÌÅ¨
        if (!stats[code]) stats[code] = {};
        stats[code].sources = (stats[code].sources || 0) + 1;
      }
    });
    
    return stats;
    
  } catch (error) {
    console.error('‚ùå ÌÜµÍ≥Ñ Ï°∞Ìöå Ïò§Î•ò:', error);
    // Îπà ÌÜµÍ≥Ñ Î∞òÌôò
    return {};
  }
}

/**
 * Íµ≠Í∞ÄÎ≥Ñ ÌòÑÌô© Ï∂úÎ†•
 */
function displayCountryStats(countryStats) {
  console.log('üìà Íµ≠Í∞ÄÎ≥Ñ ÌÖúÌîåÎ¶ø ÌòÑÌô©:');
  console.log('====================');
  
  const sortedCountries = Object.keys(countryStats).sort((a, b) => {
    const aTotal = (countryStats[a].templates || 0) + (countryStats[a].candidates || 0) + (countryStats[a].sources || 0);
    const bTotal = (countryStats[b].templates || 0) + (countryStats[b].candidates || 0) + (countryStats[b].sources || 0);
    return bTotal - aTotal;
  });
  
  sortedCountries.forEach(countryCode => {
    const stat = countryStats[countryCode];
    const country = COUNTRIES[countryCode] || { name: countryCode.toUpperCase(), flag: '‚ùì' };
    
    const templates = stat.templates || 0;
    const candidates = stat.candidates || 0;
    const sources = stat.sources || 0;
    const total = templates + candidates + sources;
    
    console.log(`${country.flag} ${country.name} (${countryCode})`);
    console.log(`   üìã ÌÖúÌîåÎ¶ø: ${templates}Í∞ú`);
    console.log(`   üìù Ï°∞Ìï≠ ÌõÑÎ≥¥: ${candidates}Í∞ú`);
    console.log(`   üìÑ ÏõêÎ≥∏ Í≥ÑÏïΩÏÑú: ${sources}Í∞ú`);
    console.log(`   üìä Ï¥ùÍ≥Ñ: ${total}Í∞ú\n`);
  });
}

/**
 * ÎåÄÌôîÌòï Íµ≠Í∞Ä ÏÑ†ÌÉù
 */
async function selectCountriesInteractive(countryStats) {
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  console.log('üéØ ÏÇ≠Ï†úÌï† Íµ≠Í∞ÄÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:');
  console.log('');
  console.log('ÏòµÏÖò:');
  console.log('  ‚Ä¢ ÌäπÏ†ï Íµ≠Í∞Ä: kr,us,uk (ÏâºÌëúÎ°ú Íµ¨Î∂Ñ)');
  console.log('  ‚Ä¢ ÏòÅÏñ¥Í∂å Íµ≠Í∞Ä: english');
  console.log('  ‚Ä¢ Î™®Îì† Íµ≠Í∞Ä: all');
  console.log('  ‚Ä¢ Ï∑®ÏÜå: cancel ÎòêÎäî Îπà ÏûÖÎ†•');
  console.log('');
  
  const answer = await new Promise(resolve => {
    rl.question('ÏÑ†ÌÉù: ', resolve);
  });
  
  rl.close();
  
  if (!answer || answer.toLowerCase() === 'cancel') {
    return null;
  }
  
  if (answer.toLowerCase() === 'all') {
    return Object.keys(countryStats);
  }
  
  if (answer.toLowerCase() === 'english') {
    const englishCountries = ['us', 'uk', 'ca', 'au', 'nz', 'ie', 'sg', 'hk', 'my', 'ph', 'in', 'za', 'ae'];
    return englishCountries.filter(country => countryStats[country]);
  }
  
  // ÏâºÌëúÎ°ú Íµ¨Î∂ÑÎêú Íµ≠Í∞Ä Î™©Î°ù
  return answer.split(',')
    .map(country => country.trim().toLowerCase())
    .filter(country => country.length > 0);
}

/**
 * ÏÑ†ÌÉùÎêú Íµ≠Í∞ÄÎì§Ïùò Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
 */
async function cleanSelectedCountries(selectedCountries, countryStats, isBatch = false) {
  console.log('\nüéØ ÏÇ≠Ï†ú ÎåÄÏÉÅ ÌôïÏù∏:');
  console.log('==================');
  
  let totalTemplates = 0, totalCandidates = 0, totalSources = 0;
  
  selectedCountries.forEach(countryCode => {
    const stat = countryStats[countryCode];
    const country = COUNTRIES[countryCode];
    
    const templates = stat.templates || 0;
    const candidates = stat.candidates || 0;
    const sources = stat.sources || 0;
    
    console.log(`${country.flag} ${country.name} (${countryCode})`);
    console.log(`   üìã ÌÖúÌîåÎ¶ø: ${templates}Í∞ú`);
    console.log(`   üìù Ï°∞Ìï≠ ÌõÑÎ≥¥: ${candidates}Í∞ú`);
    console.log(`   üìÑ ÏõêÎ≥∏ Í≥ÑÏïΩÏÑú: ${sources}Í∞ú`);
    
    totalTemplates += templates;
    totalCandidates += candidates;
    totalSources += sources;
  });
  
  console.log('\nüìä ÏÇ≠Ï†ú ÏòàÏ†ï Ï¥ùÍ≥Ñ:');
  console.log(`   üìã ÌÖúÌîåÎ¶ø: ${totalTemplates}Í∞ú`);
  console.log(`   üìù Ï°∞Ìï≠ ÌõÑÎ≥¥: ${totalCandidates}Í∞ú`);
  console.log(`   üìÑ ÏõêÎ≥∏ Í≥ÑÏïΩÏÑú: ${totalSources}Í∞ú`);
  console.log(`   üóëÔ∏è Ï¥ù ${totalTemplates + totalCandidates + totalSources}Í∞ú Îç∞Ïù¥ÌÑ∞`);
  
  // Î∞∞Ïπò Î™®ÎìúÍ∞Ä ÏïÑÎãàÎ©¥ ÌôïÏù∏ ÏöîÏ≤≠
  if (!isBatch) {
    const confirmed = await askFinalConfirmation(selectedCountries);
    if (!confirmed) {
      console.log('‚ùå ÏÇ≠Ï†úÍ∞Ä Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.');
      return;
    }
  }
  
  console.log('\nüöÄ ÏÇ≠Ï†ú ÏûëÏóÖ ÏãúÏûë...');
  
  // Ìä∏ÎûúÏû≠ÏÖòÏúºÎ°ú ÏïàÏ†ÑÌïòÍ≤å ÏÇ≠Ï†ú
  await prisma.$transaction(async (tx) => {
    // 1. Ï°∞Ìï≠ ÌõÑÎ≥¥ ÏÇ≠Ï†ú
    console.log('   üìù Ï°∞Ìï≠ ÌõÑÎ≥¥ ÏÇ≠Ï†ú Ï§ë...');
    const deletedCandidates = await tx.clauseCandidate.deleteMany({
      where: { countryCode: { in: selectedCountries } }
    });
    console.log(`      ‚úÖ ${deletedCandidates.count}Í∞ú ÏÇ≠Ï†ú`);
    
    // 2. ÏõêÎ≥∏ Í≥ÑÏïΩÏÑú ÏÇ≠Ï†ú
    console.log('   üìÑ ÏõêÎ≥∏ Í≥ÑÏïΩÏÑú ÏÇ≠Ï†ú Ï§ë...');
    const deletedSources = await tx.sourceContract.deleteMany({
      where: { countryCode: { in: selectedCountries } }
    });
    console.log(`      ‚úÖ ${deletedSources.count}Í∞ú ÏÇ≠Ï†ú`);
    
    // 3. ÌÖúÌîåÎ¶ø Ï∞∏Ï°∞ Ï†ïÎ¶¨
    console.log('   üîó ÌÖúÌîåÎ¶ø Ï∞∏Ï°∞ Ï†ïÎ¶¨ Ï§ë...');
    const templateIds = await tx.contractTemplate.findMany({
      where: { countryCode: { in: selectedCountries } },
      select: { id: true }
    });
    
    const templateIdList = templateIds.map(t => t.id);
    
    if (templateIdList.length > 0) {
      const contractsUsing = await tx.contract.findMany({
        where: { templateId: { in: templateIdList } },
        select: { id: true, title: true }
      });
      
      if (contractsUsing.length > 0) {
        console.log(`      ‚ö†Ô∏è ÏòÅÌñ•Î∞õÎäî Í≥ÑÏïΩÏÑú: ${contractsUsing.length}Í∞ú`);
        
        await tx.contract.updateMany({
          where: { templateId: { in: templateIdList } },
          data: { templateId: null }
        });
        console.log(`      ‚úÖ Í≥ÑÏïΩÏÑú Ï∞∏Ï°∞ Ï†úÍ±∞Îê® (Í≥ÑÏïΩÏÑú Î≥¥Ï°¥)`);
      }
    }
    
    // 4. ÌÖúÌîåÎ¶ø ÏÇ≠Ï†ú
    console.log('   üìã ÌÖúÌîåÎ¶ø ÏÇ≠Ï†ú Ï§ë...');
    const deletedTemplates = await tx.contractTemplate.deleteMany({
      where: { countryCode: { in: selectedCountries } }
    });
    console.log(`      ‚úÖ ${deletedTemplates.count}Í∞ú ÏÇ≠Ï†ú`);
  });
  
  // ÏµúÏ¢Ö ÌòÑÌô© ÌôïÏù∏
  console.log('\nüìä ÏÇ≠Ï†ú ÏôÑÎ£å - ÌòÑÏû¨ ÌòÑÌô©:');
  const finalStats = await getCountryTemplateStats();
  
  console.log(`‚úÖ ${selectedCountries.length}Í∞ú Íµ≠Í∞Ä Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÏôÑÎ£å!`);
  console.log(`üìã ÎÇ®ÏùÄ Íµ≠Í∞Ä: ${Object.keys(finalStats).length}Í∞ú`);
  
  if (Object.keys(finalStats).length > 0) {
    console.log('\nüîÑ ÎÇ®ÏùÄ Íµ≠Í∞ÄÎì§:');
    Object.keys(finalStats).forEach(countryCode => {
      const country = COUNTRIES[countryCode] || { name: countryCode, flag: '‚ùì' };
      const total = (finalStats[countryCode].templates || 0) + 
                   (finalStats[countryCode].candidates || 0) + 
                   (finalStats[countryCode].sources || 0);
      console.log(`   ${country.flag} ${country.name}: ${total}Í∞ú Îç∞Ïù¥ÌÑ∞`);
    });
  }
  
  console.log('\nüöÄ Îã§Ïùå Îã®Í≥Ñ:');
  console.log('1. ÏóÖÍ∑∏Î†àÏù¥ÎìúÎêú AI ÏãúÏä§ÌÖúÏúºÎ°ú Ïû¨ÏóÖÎ°úÎìú');
  console.log('2. node scripts/bulkUploadTemplates.js --token=YOUR_TOKEN');
  console.log('3. http://localhost:3100/admin/clausesÏóêÏÑú Í≤∞Í≥º ÌôïÏù∏');
}

/**
 * ÏµúÏ¢Ö ÌôïÏù∏
 */
async function askFinalConfirmation(selectedCountries) {
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  const countryNames = selectedCountries.map(code => 
    `${COUNTRIES[code]?.flag} ${COUNTRIES[code]?.name || code}`
  ).join(', ');
  
  const answer = await new Promise(resolve => {
    rl.question(`\n‚ö†Ô∏è Ï†ïÎßêÎ°ú Îã§Ïùå Íµ≠Í∞ÄÎì§Ïùò Î™®Îì† Îç∞Ïù¥ÌÑ∞Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n${countryNames}\n\nÏûÖÎ†• (DELETE): `, resolve);
  });
  
  rl.close();
  return answer === 'DELETE';
}

/**
 * Î™ÖÎ†πÌñâ Ïù∏Ïàò ÌååÏã±
 */
function parseArguments() {
  const args = process.argv.slice(2);
  const result = { countries: [] };
  
  args.forEach(arg => {
    if (arg.startsWith('--countries=')) {
      result.countries = arg.split('=')[1].split(',').map(c => c.trim().toLowerCase());
    } else if (arg === '--batch' || arg === '-b') {
      result.batch = true;
    } else if (arg === '--help' || arg === '-h') {
      result.help = true;
    }
  });
  
  return result;
}

/**
 * ÏÇ¨Ïö©Î≤ï Ï∂úÎ†•
 */
function showUsage() {
  console.log('üßπ Íµ≠Í∞ÄÎ≥Ñ Í≥ÑÏïΩÏÑú Ï°∞Ìï≠ Îç∞Ïù¥ÌÑ∞ ÏÑ†ÌÉù ÏÇ≠Ï†ú ÏãúÏä§ÌÖú');
  console.log('');
  console.log('ÏÇ¨Ïö©Î≤ï:');
  console.log('  node scripts/CleanClauses.js                           # ÎåÄÌôîÌòï Î™®Îìú');
  console.log('  node scripts/CleanClauses.js --countries=kr,us,uk      # ÌäπÏ†ï Íµ≠Í∞ÄÎì§');
  console.log('  node scripts/CleanClauses.js --countries=kr --batch    # Î∞∞Ïπò Î™®Îìú');
  console.log('  node scripts/CleanClauses.js --help                    # ÎèÑÏõÄÎßê');
  console.log('');
  console.log('ÏòµÏÖò:');
  console.log('  --countries=LIST  ÏÇ≠Ï†úÌï† Íµ≠Í∞Ä ÏΩîÎìúÎì§ (ÏâºÌëúÎ°ú Íµ¨Î∂Ñ)');
  console.log('  --batch, -b       ÌôïÏù∏ÏóÜÏù¥ Ï¶âÏãú Ïã§Ìñâ');
  console.log('  --help, -h        ÎèÑÏõÄÎßê Ï∂úÎ†•');
  console.log('');
  console.log('üåç ÏßÄÏõê Íµ≠Í∞Ä ÏΩîÎìú:');
  Object.entries(COUNTRIES).forEach(([code, info]) => {
    console.log(`  ${info.flag} ${code.padEnd(3)} : ${info.name}`);
  });
  console.log('');
  console.log('üìù ÏòàÏãú:');
  console.log('  node scripts/CleanClauses.js --countries=us,uk,ca      # Î∂ÅÎØ∏/ÏòÅÍµ≠Îßå ÏÇ≠Ï†ú');
  console.log('  node scripts/CleanClauses.js --countries=kr            # ÌïúÍµ≠Îßå ÏÇ≠Ï†ú');
  console.log('');
  console.log('‚ö†Ô∏è Ï£ºÏùòÏÇ¨Ìï≠:');
  console.log('  ‚Ä¢ ÏÇ≠Ï†úÎêú Îç∞Ïù¥ÌÑ∞Îäî Î≥µÍµ¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§');
  console.log('  ‚Ä¢ Í≥ÑÏïΩÏÑúÎäî Î≥¥Ï°¥ÎêòÏßÄÎßå ÌÖúÌîåÎ¶ø Ï∞∏Ï°∞Í∞Ä Ï†úÍ±∞Îê©ÎãàÎã§');
  console.log('  ‚Ä¢ Î∞∞Ïπò Î™®ÎìúÏóêÏÑúÎäî Î∞òÎìúÏãú --countries ÏòµÏÖòÏù¥ ÌïÑÏöîÌï©ÎãàÎã§');
}

/**
 * ÏóêÎü¨ Ìï∏Îì§ÎßÅ
 */
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Ï≤òÎ¶¨ÎêòÏßÄ ÏïäÏùÄ Promise Í±∞Î∂Ä:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Ï≤òÎ¶¨ÎêòÏßÄ ÏïäÏùÄ ÏòàÏô∏:', error);
  process.exit(1);
});

// Î©îÏù∏ Ïã§Ìñâ
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ Ïò§Î•ò:', error);
    process.exit(1);
  });
}